<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小说爬虫实战（二）章节以及内容的获取</title>
      <link href="2021/01/07/xiao-shuo-pa-chong-shi-zhan-san/"/>
      <url>2021/01/07/xiao-shuo-pa-chong-shi-zhan-san/</url>
      
        <content type="html"><![CDATA[<h1 id="小说爬虫实战（三）完工-多线程开整"><a href="#小说爬虫实战（三）完工-多线程开整" class="headerlink" title="小说爬虫实战（三）完工,多线程开整"></a>小说爬虫实战（三）完工,多线程开整</h1><p>推荐从前面的文章开始</p><blockquote><p><a href="http://zackyoung.top/2021/01/06/pa-chong-ru-men-jiang-jie-wo-de-di-yi-ge-requests-pa-chong-cheng-xu/">爬虫入门讲解(我的第一个requests爬虫程序)</a></p><p><a href="http://zackyoung.top/2020/12/31/xiao-shuo-pa-chong-shi-zhan-yi-sou-suo-fen-xi/">小说爬虫实战（一）搜索分析 ：小说岂不是手到擒来</a></p><p><a href="http://zackyoung.top/2021/01/06/xiao-shuo-pa-chong-shi-zhan-er/">小说爬虫实战（二）章节以及内容的获取</a></p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p><code>requests</code>                安装指令(<code>pip install requests</code>)</p><p><code>lxm</code>                          安装 (<code>pip install lxml</code>)</p><p><code>beatifulsoup4</code>       安装(<code>pip install beatifulsoup4</code>)</p></blockquote><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>这里就是源码了，不多做介绍，无非就是遍历章节源，逐个逐个获取内容，再写入；</p><p>然后把之前测试用的封装成一个函数，再挨个调用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">req_soup</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"latin1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> soup<span class="token comment" spellcheck="true"># 搜索书</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">:</span>    search_url <span class="token operator">=</span> <span class="token string">'http://www.tycqxs.com/search.php'</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'searchkey'</span><span class="token punctuation">:</span> keyword    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 这里需要解码</span>    search_soup <span class="token operator">=</span> req_soup<span class="token punctuation">(</span>search_url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    items <span class="token operator">=</span> search_soup<span class="token punctuation">.</span>table<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    books_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>        books <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 书名</span>        books<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        <span class="token comment" spellcheck="true"># 源地址</span>        books<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 最后一章</span>        books<span class="token punctuation">[</span><span class="token string">"last_chapter"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        <span class="token comment" spellcheck="true"># 作者</span>        books<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string        <span class="token comment" spellcheck="true"># 最后发布时间</span>        books<span class="token punctuation">[</span><span class="token string">"last_date"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string        books_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>books<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">4</span>    <span class="token keyword">return</span> books_list<span class="token comment" spellcheck="true"># 获取章节</span><span class="token keyword">def</span> <span class="token function">get_chapters</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  正在获取章节  ================================================="</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> req_soup<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从第10个开始</span>    i <span class="token operator">=</span> <span class="token number">9</span>    dd <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span>    chapters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">:</span>        chapter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        chapter<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>string        chapter<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com"</span> <span class="token operator">+</span> dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        chapters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  成功获取章节  ================================================="</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> chapters<span class="token comment" spellcheck="true"># 获取内容</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  正在获取内容  ================================================="</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf8"</span>    result <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br />"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>    dd <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"content"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dd<span class="token punctuation">.</span>text<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>search_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  正在写入内容  ================================================="</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> f<span class="token string">"novel/{search_name}.txt"</span>    fd <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w+"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fd<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    search_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>    books <span class="token operator">=</span> search<span class="token punctuation">(</span>search_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"序号\t\t文章名称\t\t最新章节\t\t作者\t\t更新\t\t"</span><span class="token punctuation">)</span>    chapters_url <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"{i + 1}\t\t{books[i]['name']}\t\t{books[i]['last_chapter']}\t\t{books[i]['author']}\t\t{books[i]['last_date']}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入书名对应的编号来获取对应的书"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        chapters_url <span class="token operator">=</span> books<span class="token punctuation">[</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        filename <span class="token operator">=</span> books<span class="token punctuation">[</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的序号"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取章节列表</span>    chapters <span class="token operator">=</span> get_chapters<span class="token punctuation">(</span>chapters_url<span class="token punctuation">)</span>    fd <span class="token operator">=</span> None    <span class="token keyword">try</span><span class="token punctuation">:</span>        strattime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        fd <span class="token operator">=</span> download<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token keyword">for</span> chapter <span class="token keyword">in</span> chapters<span class="token punctuation">:</span>            content <span class="token operator">=</span> chapter<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n\n\n"</span> <span class="token operator">+</span> get_content<span class="token punctuation">(</span>chapter<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\n\n"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                f<span class="token string">"======================================= {chapter['name']}内容获取成功  =================================================\n\n"</span><span class="token punctuation">)</span>            fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        endtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"耗时：{}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>endtime <span class="token operator">-</span> strattime<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"失败原因：{e}"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        fd<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  小说已经写入完毕  ================================================="</span><span class="token punctuation">)</span></code></pre><blockquote><p>大家可以自行复制代码一步一步研究，之前的文档也每个步骤都算是比较详细了</p></blockquote><p>手机效果图：</p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/Screenshot_20210107_000207_com.huawei.hwread.al.jpg" alt="Screenshot_20210107_000207_com.huawei.hwread.al"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/Screenshot_20210107_000216_com.huawei.hwread.al.jpg" alt="Screenshot_20210107_000216_com.huawei.hwread.al"></p><blockquote><p>我用的是华为自带的阅读，按道理每个小说软件都可以自动排版的</p></blockquote><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">req_soup</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"latin1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> soup<span class="token comment" spellcheck="true"># 搜索书</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">:</span>    search_url <span class="token operator">=</span> <span class="token string">'http://www.tycqxs.com/search.php'</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'searchkey'</span><span class="token punctuation">:</span> keyword    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 这里需要解码</span>    search_soup <span class="token operator">=</span> req_soup<span class="token punctuation">(</span>search_url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>    items <span class="token operator">=</span> search_soup<span class="token punctuation">.</span>table<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    books_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>        books <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 书名</span>        books<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        <span class="token comment" spellcheck="true"># 源地址</span>        books<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 最后一章</span>        books<span class="token punctuation">[</span><span class="token string">"last_chapter"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        <span class="token comment" spellcheck="true"># 作者</span>        books<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string        <span class="token comment" spellcheck="true"># 最后发布时间</span>        books<span class="token punctuation">[</span><span class="token string">"last_date"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string        books_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>books<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">4</span>    <span class="token keyword">return</span> books_list<span class="token comment" spellcheck="true"># 获取章节</span><span class="token keyword">def</span> <span class="token function">get_chapters</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  正在获取章节  ================================================="</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> req_soup<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从第10个开始</span>    i <span class="token operator">=</span> <span class="token number">9</span>    dd <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span>    chapters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">:</span>        chapter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        chapter<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>string        chapter<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com"</span> <span class="token operator">+</span> dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        i<span class="token operator">+=</span><span class="token number">1</span>        chapters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  成功获取章节  ================================================="</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> chapters<span class="token comment" spellcheck="true"># 获取内容</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  正在获取内容  ================================================="</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">"utf8"</span>    result <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br />"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>    dd <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"content"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dd<span class="token punctuation">.</span>text<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>search_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  正在写入内容  ================================================="</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> f<span class="token string">"novel/{search_name}.txt"</span>    fd <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w+"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fd<span class="token keyword">class</span> <span class="token class-name">myThread</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> threadID<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> chapters<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>threadID <span class="token operator">=</span> threadID        self<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd        self<span class="token punctuation">.</span>chapters <span class="token operator">=</span> chapters    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"开启线程： "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取锁，用于线程同步</span>        threadLock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fd<span class="token punctuation">,</span>self<span class="token punctuation">.</span>chapters<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 释放锁，开启下一个线程</span>        threadLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span> fd<span class="token punctuation">,</span>chapters<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> chapter <span class="token keyword">in</span> chapters<span class="token punctuation">:</span>            content <span class="token operator">=</span> chapter<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n\n\n"</span> <span class="token operator">+</span> get_content<span class="token punctuation">(</span>chapter<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\n\n"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                f<span class="token string">"======================================= {chapter['name']}内容获取成功  =================================================\n\n"</span><span class="token punctuation">)</span>            fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"失败原因：{e}"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        fd<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======================================  小说已经写入完毕  ================================================="</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    search_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>    books <span class="token operator">=</span> search<span class="token punctuation">(</span>search_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"序号\t\t文章名称\t\t最新章节\t\t作者\t\t更新\t\t"</span><span class="token punctuation">)</span>    chapters_url <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"{i + 1}\t\t{books[i]['name']}\t\t{books[i]['last_chapter']}\t\t{books[i]['author']}\t\t{books[i]['last_date']}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入书名对应的编号来获取对应的书"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        chapters_url<span class="token operator">=</span>books<span class="token punctuation">[</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        filename <span class="token operator">=</span> books<span class="token punctuation">[</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入正确的序号"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取章节列表</span>    chapters <span class="token operator">=</span> get_chapters<span class="token punctuation">(</span>chapters_url<span class="token punctuation">)</span>    fd <span class="token operator">=</span> download<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    threadLock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建新线程</span>        thread1 <span class="token operator">=</span> myThread<span class="token punctuation">(</span>i<span class="token punctuation">,</span>fd<span class="token punctuation">,</span>chapters<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开启新线程</span>        thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 添加线程到线程列表</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待所有线程完成</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出主线程"</span><span class="token punctuation">)</span></code></pre><blockquote><p>速度提升不大，毕竟小说顺序不能乱，得挨个排队写入，但性能速度确实要快一些</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说爬虫实战（二）章节以及内容的获取</title>
      <link href="2021/01/06/xiao-shuo-pa-chong-shi-zhan-er/"/>
      <url>2021/01/06/xiao-shuo-pa-chong-shi-zhan-er/</url>
      
        <content type="html"><![CDATA[<h1 id="小说爬虫实战（二）章节以及内容的获取"><a href="#小说爬虫实战（二）章节以及内容的获取" class="headerlink" title="小说爬虫实战（二）章节以及内容的获取"></a>小说爬虫实战（二）章节以及内容的获取</h1><p>推荐从前面的文章开始</p><blockquote><p><a href="http://zackyoung.top/2021/01/06/pa-chong-ru-men-jiang-jie-wo-de-di-yi-ge-requests-pa-chong-cheng-xu/">爬虫入门讲解(我的第一个requests爬虫程序)</a></p><p><a href="http://zackyoung.top/2020/12/31/xiao-shuo-pa-chong-shi-zhan-yi-sou-suo-fen-xi/">小说爬虫实战（一）搜索分析 ：小说岂不是手到擒来</a></p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p><code>requests</code>                安装指令(<code>pip install requests</code>)</p><p><code>lxm</code>                          安装 (<code>pip install lxml</code>)</p><p><code>beatifulsoup4</code>       安装(<code>pip install beatifulsoup4</code>)</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="章节的url和name的获取"><a href="#章节的url和name的获取" class="headerlink" title="章节的url和name的获取"></a>章节的url和name的获取</h3><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106172231560.png" alt="image-20210106172231560"></p><p>接下来，直接用soup获取相关内容</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com/57_57695/"</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf8"</span>result <span class="token operator">=</span> r<span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从第9个开始</span>i <span class="token operator">=</span> <span class="token number">9</span>dd <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span>chapters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">:</span>    chapter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    chapter<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>string    chapter<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com"</span> <span class="token operator">+</span> dd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span>    chapters<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chapter<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106172806721.png" alt="image-20210106172806721"></p><blockquote><p>这样，章节相关数据就获取到了</p></blockquote><h3 id="章节里的内容获取"><a href="#章节里的内容获取" class="headerlink" title="章节里的内容获取"></a>章节里的内容获取</h3><p>这里虽然不难，但是第二个点把我难住了，居然没有数据，byte类型时数据都还在，我估计是编码问题，然后我把<code>&lt;br /&gt;</code>替换掉，就是正常的</p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106173215230.png" alt="image-20210106173215230"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106173607586.png" alt="image-20210106173607586"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106173920758.png" alt="image-20210106173920758"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com/57_57695/21606497.html"</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf8"</span>result <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br />"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>dd <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dd<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说爬虫实战（一）搜索分析 ：小说岂不是手到擒来</title>
      <link href="2021/01/06/xiao-shuo-pa-chong-shi-zhan-yi-sou-suo-fen-xi/"/>
      <url>2021/01/06/xiao-shuo-pa-chong-shi-zhan-yi-sou-suo-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="小说爬虫实战（一）搜索分析-：小说岂不是手到擒来"><a href="#小说爬虫实战（一）搜索分析-：小说岂不是手到擒来" class="headerlink" title="小说爬虫实战（一）搜索分析 ：小说岂不是手到擒来"></a>小说爬虫实战（一）搜索分析 ：小说岂不是手到擒来</h1><p>推荐从前面的文章开始</p><blockquote><p><a href="http://zackyoung.top/2020/12/31/pa-chong-ru-men-jiang-jie-wo-de-di-yi-ge-requests-pa-chong-cheng-xu/">爬虫入门讲解(我的第一个requests爬虫程序)</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天主要讲的是小说的爬取，告别广告；这个就是我们盘的对象</p><p>主要说明requests的使用和beatifulsoup的html解析</p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106161454500.png" alt="image-20210106161454500"></p></blockquote><p>主要内容，对<strong>搜索</strong>的分析</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p><code>requests</code>                安装指令(<code>pip install requests</code>)</p><p><code>lxm</code>                          安装 (<code>pip install lxml</code>)</p><p><code>beatifulsoup4</code>       安装(<code>pip install beatifulsoup4</code>)</p></blockquote><p>首先进行分析，小说分为这几个步骤：搜索 -&gt; 选择对应的书籍 -&gt; 下载</p><p>而我们爬虫就得 搜索 -&gt; 选择对应的书籍 -&gt;  获取所有的章节包括跳转url -&gt; 获取章节里的内容 -&gt; 写入文件</p><p>一定要习惯性按F12打开浏览器的开发者工具</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="搜索解析"><a href="#搜索解析" class="headerlink" title="搜索解析"></a>搜索解析</h3><p>打开网页 <a href="http://www.tycqxs.com/search.php" target="_blank" rel="noopener">天域小说网</a></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106163620056.png" alt="image-20210106163620056"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106163531162.png" alt="image-20210106163531162"></p><p>我可以搜索<strong>武动乾坤</strong>，可以发现<code>url</code>并没有什么变化，然后我们在左边哪里找跳转的<code>html</code>；</p><blockquote><p>注意：一定得开着开发者工具跳转，并且打开Preserve log</p></blockquote><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106164256993.png" alt="image-20210106164256993"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106164855803.png" alt="image-20210106164855803"></p><p>现在，通过requests获取源码吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com/search.php"</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 根据刚刚查找到的值的</span>    <span class="token string">'searchkey'</span><span class="token punctuation">:</span><span class="token string">'武动乾坤'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>result <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>结果如下：</p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106165123116.png" alt="image-20210106165123116"></p><blockquote><p>beautifulSoup的使用请看这</p><p><a href="http://www.jsphp.net/python/show-24-214-1.html" target="_blank" rel="noopener">http://www.jsphp.net/python/show-24-214-1.html</a></p></blockquote><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106165804017.png" alt="image-20210106165804017"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106170609533.png" alt="image-20210106170609533"></p><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/image-20210106171111075.png" alt="image-20210106171111075"></p><p>到这，搜索获取的值都已经得到了，先告一段落</p><p>源码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">"http://www.tycqxs.com/search.php"</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 根据刚刚查找到的值的</span>    <span class="token string">'searchkey'</span><span class="token punctuation">:</span> <span class="token string">'武动乾坤'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf8"</span>result <span class="token operator">=</span> r<span class="token punctuation">.</span>textsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>items <span class="token operator">=</span> soup<span class="token punctuation">.</span>table<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>books_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    books <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 书名</span>    books<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># 源地址</span>    books<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 最后一章</span>    books<span class="token punctuation">[</span><span class="token string">"last_chapter"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># 作者</span>    books<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true"># 最后发布时间</span>    books<span class="token punctuation">[</span><span class="token string">"last_date"</span><span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>string    books_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>books<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 因为我们获取的表格是每4个一次，所以这里加4</span>    i <span class="token operator">+=</span> <span class="token number">4</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门讲解(我的第一个requests爬虫程序)</title>
      <link href="2021/01/06/pa-chong-ru-men-jiang-jie-wo-de-di-yi-ge-requests-pa-chong-cheng-xu/"/>
      <url>2021/01/06/pa-chong-ru-men-jiang-jie-wo-de-di-yi-ge-requests-pa-chong-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫入门讲解-我的第一个requests爬虫程序"><a href="#爬虫入门讲解-我的第一个requests爬虫程序" class="headerlink" title="爬虫入门讲解(我的第一个requests爬虫程序)"></a>爬虫入门讲解(我的第一个requests爬虫程序)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对请求方式或是<code>json</code>不太了解的，可以看看我的这一篇文章；<a href="https://www.zackyoung.top/2020/12/07/web-jiang-jie/" target="_blank" rel="noopener">浅谈对Web的理解(一)</a></p><p>基础入门就先从这里开始。我们所说的爬虫就是用无头浏览器获取网页的数据，然后对数据进行解析，最终获取一套完整并且有用的数据，比如文字、图片、视频等等；</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p><code>puthon3</code></p><p><code>requests</code></p><p><code>pycharm</code></p></blockquote><p>如果是<code>python</code>新手，不知道<code>pycharm</code>如何使用的，看这篇文章；<a href="http://www.zackyoung.top/2020/12/08/flask-ru-men-pian/" target="_blank" rel="noopener">Flask入门篇（创建第一个Flask程序）</a>，前面就是讲解部分<code>pycharm</code>创建项目和添加包</p><h2 id="开始体验"><a href="#开始体验" class="headerlink" title="开始体验"></a>开始体验</h2><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/D7i28N.png" alt="D7i28N"></p><p>就先从了解<code>requests</code>框架的相关语法开始吧</p><p>从<strong>百度</strong>网站开始走起</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token comment" spellcheck="true"># req = requests.request("POST",url)</span>req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span>result <span class="token operator">=</span> req<span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">这里需要注意的是： requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>是等同于requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/JK6VSc.png" alt="JK6VSc"></p><p>这里就进行编码转换</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token comment" spellcheck="true"># req = requests.request("POST",url)</span>req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span>result <span class="token operator">=</span> req<span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"latin1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/eIPnln.png" alt="eIPnln"></p><p>第一个无头浏览器爬虫就是这么简单来，一步一步慢慢来，后面还有高难度的</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8.0及以上使用yum安装mysql</title>
      <link href="2021/01/04/yum-an-zhuang-mysql/"/>
      <url>2021/01/04/yum-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-8-0及以上使用yum安装mysql"><a href="#CentOS-8-0及以上使用yum安装mysql" class="headerlink" title="CentOS 8.0及以上使用yum安装mysql"></a>CentOS 8.0及以上使用yum安装mysql</h1><p>环境：</p><pre><code>1. Centos 8.0及以上</code></pre><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>检查系统本身是否安装mysql</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# yum list installed mysql*[root@localhost ~]# rpm –qa|grep mysql*</code></pre><ol start="2"><li><p>查看yum源里是否有mysql安装包</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# yum list mysql*</code></pre></li><li><p>安装mysql客户端-服务端(默认最新版本8.0以上)</p><pre class=" language-shell"><code class="language-shell">root@localhost ~]# yum install mysql-sever</code></pre></li><li><p>在/etc/my.cnf 文件中加入默认字符集</p><blockquote><p>这里千万要注意，配置文件不要填错，安装自带的配置内容最好是删除干净，重新写</p></blockquote><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# vim /etc/my.cnf[client]port = 3306socket = /usr/lib/mysql/mysql/data/mcdb/mysql.sock[mysql]no-auto-rehash[mysqld]user = mysqlport = 3306socket = /usr/lib/mysql/mysql/data/mcdb/mysql.sockbasedir = /usr/lib/mysql/mysqldatadir = /usr/lib/mysql/mysql/datapid-file = /usr/lib/mysql/mysql/data/mcdb/mysql.pidrelay-log = /usr/lib/mysql/mysql/data/mcdb/relay-binrelay-log-info-file = /usr/lib/mysql/mysql/data/mcdb/relay-log.infoserver-id = 13[mysqld_safe]log-error = /usr/lib/mysql/mysql/data/mcdb/mysql.errpid-file = /usr/lib/mysql/mysql/data/mcdb/mysql.pid</code></pre></li><li><p>初始化mysql</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# mysqld --initialize --user=root</code></pre><p><img src="https://gitee.com/zackyoung/drawing-bed/raw/master/Afrozg%20.png" alt="Afrozg"></p></li></ol><blockquote><p>如果控制台没有打印，或者有错误看日志</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# cat /var/log/mysql/mysqld.log</code></pre><p>为了保险起见把目录权限改为全通过</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# chmod -R 777 /var/lib/mysql</code></pre></blockquote><ol start="6"><li><p>开启服务</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# systemctl start mysqld.service</code></pre></li></ol><h3 id="第一次使用"><a href="#第一次使用" class="headerlink" title="第一次使用"></a>第一次使用</h3><p>由于是第一次使用mysql，强制被要求改密码</p><ol><li><p>首先进入mysql，使用我们刚刚获得的随机密码</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# mysql -uroot -p</code></pre></li></ol><ol start="2"><li>修改密码</li></ol><pre class=" language-shell"><code class="language-shell">mysql> alter user 'root'@'localhost' identified by '你的密码';</code></pre><ol start="3"><li>允许远程访问(改表法)</li></ol><pre class=" language-shell"><code class="language-shell">mysql> use mysql;mysql> update user set host = '%' where user = 'root';mysql> FLUSH PRIVILEGES;mysql> exit</code></pre><ol start="4"><li><p>接下来就可以使用刚刚设置的密码登录</p><blockquote><p>保险起见还是重启服务</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# systemctl restartr mysqld</code></pre></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask终结篇：代码规范化</title>
      <link href="2020/12/09/flask-zhong-jie-pian/"/>
      <url>2020/12/09/flask-zhong-jie-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Flask终结篇：代码规范化"><a href="#Flask终结篇：代码规范化" class="headerlink" title="Flask终结篇：代码规范化"></a>Flask终结篇：代码规范化</h1></blockquote><blockquote><p>本文章不讲多的知识，只是把这个项目结构划个分，逻辑明了化</p></blockquote><p>直接上图</p><p><img src="https://s3.ax1x.com/2020/12/09/rPGBD0.png"></p><h2 id="manage-py"><a href="#manage-py" class="headerlink" title="manage.py"></a><code>manage.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Server<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> MigrateCommand<span class="token keyword">from</span> app <span class="token keyword">import</span> create_app<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 系统检测环境配置,如果没有就会选择默认环境</span>config_name <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"FLASK_CONFIG"</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">"default"</span><span class="token comment" spellcheck="true"># 创建app,此刻app初始化单独分出来，因为后面需要配置的文件有些多</span>app <span class="token operator">=</span> create_app<span class="token punctuation">(</span>config_name<span class="token punctuation">)</span>manage <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加运行参数命令</span>manage<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">"runserver"</span><span class="token punctuation">,</span> Server<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> use_debugger<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这是数据库迁移操作，具体用法百度</span>manage<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">"db"</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manage<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="app-config-py"><a href="#app-config-py" class="headerlink" title="/app/config.py"></a><code>/app/config.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这一个类是对数据库等相关配置</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 检查当前运行的目录</span>base_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 秘钥</span>    SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">'123456'</span>    <span class="token comment" spellcheck="true"># 数据库</span>    SQLALCHEMY_COMMIT_ON_TEARDOWN <span class="token operator">=</span> <span class="token boolean">True</span>    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 额外的初始化操作，即使什么内容都没有写，也是有意义的</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">init_app</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 开发环境   语法：mysql+pymysql://用户名：密码@ip：端口/数据库名</span><span class="token keyword">class</span> <span class="token class-name">DevelopmentConfig</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:1052455797@localhost:3306/test'</span><span class="token comment" spellcheck="true"># 测试环境</span><span class="token keyword">class</span> <span class="token class-name">TestingConfig</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:root@localhost:3306/visiondata'</span><span class="token comment" spellcheck="true"># 生产环境</span><span class="token keyword">class</span> <span class="token class-name">ProductionConfig</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:root@localhost:3306/visiondata'</span><span class="token comment" spellcheck="true"># 配置字典</span>config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'development'</span><span class="token punctuation">:</span> DevelopmentConfig<span class="token punctuation">,</span>    <span class="token string">'testing'</span><span class="token punctuation">:</span> TestingConfig<span class="token punctuation">,</span>    <span class="token string">'production'</span><span class="token punctuation">:</span> ProductionConfig<span class="token punctuation">,</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> DevelopmentConfig<span class="token punctuation">}</span></code></pre><h2 id="app-extensions-py"><a href="#app-extensions-py" class="headerlink" title="/app/extensions.py"></a><code>/app/extensions.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入类库</span><span class="token keyword">from</span> flask_bootstrap <span class="token keyword">import</span> Bootstrap<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> Migrate<span class="token keyword">from</span> flask_moment <span class="token keyword">import</span> Moment<span class="token comment" spellcheck="true"># 这一个类是做初始化的</span><span class="token comment" spellcheck="true"># 创建对象</span>bootstrap <span class="token operator">=</span> Bootstrap<span class="token punctuation">(</span><span class="token punctuation">)</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>moment <span class="token operator">=</span> Moment<span class="token punctuation">(</span><span class="token punctuation">)</span>migrate <span class="token operator">=</span> Migrate<span class="token punctuation">(</span>db<span class="token operator">=</span>db<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化</span><span class="token keyword">def</span> <span class="token function">config_extensions</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>    bootstrap<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    moment<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    migrate<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span></code></pre><h2 id="app-models-product-py"><a href="#app-models-product-py" class="headerlink" title="/app/models/product.py"></a><code>/app/models/product.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> app<span class="token punctuation">.</span>extensions <span class="token keyword">import</span> db<span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">"product"</span>    <span class="token comment" spellcheck="true"># id，primary_key是否是主键,名字和类型必须和数据对应</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># varchar类型对应String</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span>    description <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实体类添加to_dict解析成字典模式</span>    <span class="token keyword">def</span> <span class="token function">to_dict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> None<span class="token punctuation">)</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>__table__<span class="token punctuation">.</span>columns<span class="token punctuation">}</span></code></pre><h2 id="app-models-init-py"><a href="#app-models-init-py" class="headerlink" title="/app/models/__init__.py"></a><code>/app/models/__init__.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> app<span class="token punctuation">.</span>extensions <span class="token keyword">import</span> db<span class="token keyword">from</span> <span class="token punctuation">.</span>product <span class="token keyword">import</span> Product</code></pre><h2 id="app-views-main-py"><a href="#app-views-main-py" class="headerlink" title="/app/views/main.py"></a><code>/app/views/main.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint<span class="token punctuation">,</span>render_template<span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> Product<span class="token punctuation">,</span>dbmain <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二种</span>@main<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/product"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># sqlalchemy语法</span>    product <span class="token operator">=</span> Product<span class="token punctuation">.</span>query<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span> product<span class="token operator">=</span>product<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一种</span>@main<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    product <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from product'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span> product<span class="token operator">=</span>product<span class="token punctuation">)</span></code></pre><h2 id="app-views-init-py"><a href="#app-views-init-py" class="headerlink" title="/app/views/__init__.py"></a><code>/app/views/__init__.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>main <span class="token keyword">import</span> main<span class="token comment" spellcheck="true"># 蓝本配置</span>DEFAULT_BLUEPRINT <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 蓝本，前缀</span>    <span class="token punctuation">(</span>main<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 封装函数，完成蓝本注册</span><span class="token keyword">def</span> <span class="token function">config_blueprint</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> blueprint<span class="token punctuation">,</span> prefix <span class="token keyword">in</span> DEFAULT_BLUEPRINT<span class="token punctuation">:</span>        app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>blueprint<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span>prefix<span class="token punctuation">)</span></code></pre><h2 id="app-init-py"><a href="#app-init-py" class="headerlink" title="/app/__init__.py"></a><code>/app/__init__.py</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> app<span class="token punctuation">.</span>config <span class="token keyword">import</span> config<span class="token keyword">from</span> app<span class="token punctuation">.</span>extensions <span class="token keyword">import</span> config_extensions<span class="token keyword">from</span> app<span class="token punctuation">.</span>views <span class="token keyword">import</span> config_blueprint<span class="token keyword">def</span> <span class="token function">create_app</span><span class="token punctuation">(</span>config_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># config.get()等同于config['']</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span>config_name<span class="token punctuation">)</span> <span class="token operator">or</span> config<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    config_extensions<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    config_blueprint<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    config_errorhandler<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token keyword">return</span> app<span class="token comment" spellcheck="true"># 修改报错通知页面</span><span class="token keyword">def</span> <span class="token function">config_errorhandler</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 404界面</span>    @app<span class="token punctuation">.</span>errorhandler<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">page_not_found</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"这里是404界面！"</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="正常界面"><a href="#正常界面" class="headerlink" title="正常界面"></a>正常界面</h3><p><img src="https://s3.ax1x.com/2020/12/09/rPG0uq.png"></p><h3 id="404界面"><a href="#404界面" class="headerlink" title="404界面"></a><code>404</code>界面</h3><p><img src="https://s3.ax1x.com/2020/12/09/rPGdvn.png"></p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="https://zackyoung.top/resource/Flask-end.7z">源码下载</a></h2>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
            <tag> Mysql </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask进阶篇（五）：连接MySQL对接Jinja2模板引擎</title>
      <link href="2020/12/09/flask-jin-jie-pian-wu/"/>
      <url>2020/12/09/flask-jin-jie-pian-wu/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Flask进阶篇（五）：连接MySQL对接Jinja2模板引擎"><a href="#Flask进阶篇（五）：连接MySQL对接Jinja2模板引擎" class="headerlink" title="Flask进阶篇（五）：连接MySQL对接Jinja2模板引擎"></a>Flask进阶篇（五）：连接MySQL对接Jinja2模板引擎</h1></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>这是一个可以连接到<code>mysql</code>并能使用的一个<code>Flask</code>基本框架</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Server<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SQLALCHEMY_DATABASE_URI"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mysql+pymysql://root:password@localhost:3306/test"</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SQLALCHEMY_TRACK_MODIFICATIONS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>manage <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>manage<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">"runserver"</span><span class="token punctuation">,</span> Server<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> use_debugger<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manage<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><blockquote><p>就先从一个简单的折线图为例吧</p><p>这是表里的数据</p><p>id    name    price    description<br>1    苹果    2    云南产<br>2    葡萄    3    新疆<br>3    橙子    5    重庆</p></blockquote><p>首先运用到的知识是<code>Flask</code>的模板引擎，如果忘了，或不会的，点<a href="https://zackyoung.top/2020/12/08/flask-ji-chu-pian/#%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93">这里</a></p><p>并且通用与上篇说的2种查询方式</p><ol><li>创建两个路由函数视图，返回的视图也是一样的</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">"product"</span>    <span class="token comment" spellcheck="true"># id，primary_key是否是主键,名字和类型必须和数据对应</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># varchar类型对应String</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    price <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span>    description <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实体类添加to_dict解析成字典模式</span>    <span class="token keyword">def</span> <span class="token function">to_dict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> None<span class="token punctuation">)</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>__table__<span class="token punctuation">.</span>columns<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 第二种</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/product"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># sqlalchemy语法</span>    product <span class="token operator">=</span> Product<span class="token punctuation">.</span>query<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span> product<span class="token operator">=</span>product<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一种</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    product <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from product'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span> product<span class="token operator">=</span>product<span class="token punctuation">)</span></code></pre><h3 id="templates-index-html"><a href="#templates-index-html" class="headerlink" title="/templates/index.html"></a><code>/templates/index.html</code></h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>折线图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/echarts@4/dist/echarts.min.js?_v_<span class="token punctuation">=</span>1607268016278<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 获取元素</span>    <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化话echarts</span>    <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 折线图配置参数</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token punctuation">{</span>            text<span class="token punctuation">:</span> <span class="token string">'主标题'</span><span class="token punctuation">,</span>            subtext<span class="token punctuation">:</span> <span class="token string">'副标题'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'水果名'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> product <span class="token operator">%</span><span class="token punctuation">}</span><span class="token string">"{{ p.name }}"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'价格'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'value'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> product <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> p<span class="token punctuation">.</span>price <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h3><p><img src="https://s3.ax1x.com/2020/12/09/rPnu1f.png"></p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="https://zackyoung.top/resource/flask-demo3-03.7z">源码下载</a></h2>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
            <tag> Mysql </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask进阶篇（四）：连接MySQL的使用[下]</title>
      <link href="2020/12/09/flask-jin-jie-pian-si/"/>
      <url>2020/12/09/flask-jin-jie-pian-si/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Flask进阶篇（四）：连接MySQL的使用-下"><a href="#Flask进阶篇（四）：连接MySQL的使用-下" class="headerlink" title="Flask进阶篇（四）：连接MySQL的使用[下]"></a>Flask进阶篇（四）：连接MySQL的使用[下]</h1></blockquote><blockquote><p>本章是下篇，主要讲解连接<code>MySQL</code>后的使用返回json，上篇讲连接方法</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>这是一个可以连接到<code>mysql</code>并能使用的一个<code>Flask</code>基本框架</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Server<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SQLALCHEMY_DATABASE_URI"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mysql+pymysql://root:password@localhost:3306/test"</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SQLALCHEMY_TRACK_MODIFICATIONS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>manage <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>manage<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">"runserver"</span><span class="token punctuation">,</span> Server<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> use_debugger<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manage<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><blockquote><p>以下都是路由返回json格式</p></blockquote><h3 id="第一种-db-session使用语句方式"><a href="#第一种-db-session使用语句方式" class="headerlink" title="第一种(db.session使用语句方式)"></a>第一种(db.session使用语句方式)</h3><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 表里面数据是这样的</span>    <span class="token comment" spellcheck="true"># --id----username--</span>    <span class="token comment" spellcheck="true"># --1----张三--</span>    <span class="token comment" spellcheck="true"># 对应的 user查询结果是[(1,"张三")]；fetchall函数是返回全部row,fetchone返回一个row,limit是条数限制</span>    user <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回的结果是对应数据库字段的json格式</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">[</span>dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>item<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> user<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>如 ：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"123"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"张三"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="第二种（使用实体类方式）"><a href="#第二种（使用实体类方式）" class="headerlink" title="第二种（使用实体类方式）"></a>第二种（使用实体类方式）</h3><blockquote><p>在db变量下方添加一个User类（实体类）；</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">"user"</span>    <span class="token comment" spellcheck="true"># id，primary_key是否是主键,名字和类型必须和数据对应</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># varchar类型对应String</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实体类添加to_dict解析成字典模式，自定义格式</span>    <span class="token keyword">def</span> <span class="token function">to_dict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> None<span class="token punctuation">)</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>__table__<span class="token punctuation">.</span>columns<span class="token punctuation">}</span></code></pre><p>路由函数</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># sqlalchemy语法</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    list <span class="token operator">=</span> <span class="token punctuation">[</span>v<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> user<span class="token punctuation">]</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>list<span class="token punctuation">)</span></code></pre><h4 id="SQLALCHEMY语法"><a href="#SQLALCHEMY语法" class="headerlink" title="SQLALCHEMY语法"></a><code>SQLALCHEMY</code>语法</h4><blockquote><p>以下语法是我自己总结的；虽然不全，但是一般情况都包裹了进去</p></blockquote><h5 id="all-查询全部数据"><a href="#all-查询全部数据" class="headerlink" title="all()查询全部数据"></a>all()查询全部数据</h5><pre class=" language-python"><code class="language-python">table<span class="token punctuation">.</span>query<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="first-查询第一条数据"><a href="#first-查询第一条数据" class="headerlink" title="first()查询第一条数据"></a>first()查询第一条数据</h5><pre class=" language-python"><code class="language-python">table<span class="token punctuation">.</span>query<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="get通过id获取数据"><a href="#get通过id获取数据" class="headerlink" title="get通过id获取数据"></a>get通过id获取数据</h5><pre class=" language-python"><code class="language-python">id <span class="token operator">=</span> <span class="token number">1</span> table<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token punctuation">)</span></code></pre><h5 id="limit-限制返回的记录条数"><a href="#limit-限制返回的记录条数" class="headerlink" title="limit() 限制返回的记录条数"></a>limit() 限制返回的记录条数</h5><pre class=" language-python"><code class="language-python">table<span class="token punctuation">.</span>query<span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h5 id="order-by-排序方式"><a href="#order-by-排序方式" class="headerlink" title="order_by()排序方式"></a>order_by()排序方式</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> desc table<span class="token punctuation">.</span>query<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>desc<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h5 id="db-session的使用"><a href="#db-session的使用" class="headerlink" title="db.session的使用"></a>db.session的使用</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># SELECT `name`,COUNT(*) as 'count' FROM job WHERE `name` LIKE '%大数据%' GROUP BY `name` </span>job <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Job<span class="token punctuation">.</span>name<span class="token punctuation">,</span>func<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>label<span class="token punctuation">(</span><span class="token string">'count'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>Job<span class="token punctuation">.</span>job_name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">'%大数据%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>Job<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>desc<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="http://lc-naxa6v4f.cn-n1.lcfile.com/77033681de7c18a538fc.7z/Flask-end.7z" target="_blank" rel="noopener">源码下载</a></h2>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask进阶篇(三)：连接MySQL的使用 [上]</title>
      <link href="2020/12/09/flask-jin-jie-pian-san/"/>
      <url>2020/12/09/flask-jin-jie-pian-san/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Flask进阶篇-三-：连接MySQL的使用-上"><a href="#Flask进阶篇-三-：连接MySQL的使用-上" class="headerlink" title="Flask进阶篇(三)：连接MySQL的使用 [上]"></a>Flask进阶篇(三)：连接MySQL的使用 [上]</h1><p>本章是上篇，主要讲解连接<code>MySQL</code>的方法，下篇讲使用并返回json</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><p>连接<code>MySQL</code>用到的<code>Python</code>模块与插件包括如下<code>Flask-SQLALchemy</code>、<code>PyMySQL</code>、<code>SQLALchemy</code></p><p>不然运行的途中可能报没有插件等错误</p></blockquote><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy</code></pre><h3 id="写入框架"><a href="#写入框架" class="headerlink" title="写入框架"></a>写入框架</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Serverapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>manage <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>manage<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">"runserver"</span><span class="token punctuation">,</span> Server<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> use_debugger<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manage<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="开始连接"><a href="#开始连接" class="headerlink" title="开始连接"></a>开始连接</h2><h3 id="测试路由函数"><a href="#测试路由函数" class="headerlink" title="测试路由函数"></a>测试路由函数</h3><blockquote><p>主页查看是否连接成功</p></blockquote><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        results <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT VERSION()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"null"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"数据库连接成功,当前数据库版本为%s"</span><span class="token operator">%</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"数据库连接失败,请检查格式或账号密码"</span></code></pre><h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><h4 id="方法一-使用字典直接配置方式"><a href="#方法一-使用字典直接配置方式" class="headerlink" title="方法一(使用字典直接配置方式)"></a>方法一(使用字典直接配置方式)</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一种方法直接使用字典字典赋值</span><span class="token comment" spellcheck="true"># 这是配置连接源 (mysql+pymysql)这是连接方式，注意顺序不能颠倒,</span><span class="token comment" spellcheck="true"># root:password@localhost:3306/test</span><span class="token comment" spellcheck="true"># 数据库账号:密码@连接IP地址/数据库名</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SQLALCHEMY_DATABASE_URI"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mysql+pymysql://root:password@localhost:3306/test"</span><span class="token comment" spellcheck="true"># 如果设置成 True (默认情况)，Flask-SQLAlchemy 将会追踪对象的修改并且发送信号。这需要额外的内存， 如果不必要的可以禁用它。</span><span class="token comment" spellcheck="true"># 这是推荐填，不然老是出警告</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SQLALCHEMY_TRACK_MODIFICATIONS"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span></code></pre><h4 id="方法二-使用对象配置连接"><a href="#方法二-使用对象配置连接" class="headerlink" title="方法二(使用对象配置连接)"></a>方法二(使用对象配置连接)</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第二种连接方法</span><span class="token keyword">class</span> <span class="token class-name">DevelopmentConfig</span><span class="token punctuation">:</span>    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:password@localhost:3306/test'</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>DevelopmentConfig<span class="token punctuation">)</span></code></pre><h4 id="方法三-使用配置文件"><a href="#方法三-使用配置文件" class="headerlink" title="方法三(使用配置文件)"></a>方法三(使用配置文件)</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第三种连接方法（使用配置文件）</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_pyfile<span class="token punctuation">(</span><span class="token string">"config.ini"</span><span class="token punctuation">)</span></code></pre><p>同路径下的config.ini配置文件：</p><pre class=" language-ini"><code class="language-ini"><span class="token constant">SQLALCHEMY_TRACK_MODIFICATIONS</span> <span class="token attr-value"><span class="token punctuation">=</span> False</span><span class="token constant">SQLALCHEMY_DATABASE_URI</span> <span class="token attr-value"><span class="token punctuation">=</span> 'mysql+pymysql://root:password@localhost:3306/test'</span></code></pre><blockquote><p>就介绍这三种啦！！总之万变不离其宗，底层都是一样的。</p><p>如果新手使用，可能会出些Bug，请在下评论或联系博主<code>qq:1052445797</code></p></blockquote><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="https://zackyoung.top/resource/Flask-demo3-01.7z">源码下载</a></h2><h2 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h2><h3 id="配置键"><a href="#配置键" class="headerlink" title="配置键"></a>配置键</h3><p>Flask-SQLAlchemy 扩展能够识别的配置键的清单:</p><table><thead><tr><th><code>SQLALCHEMY_NATIVE_UNICODE</code></th><th>可以用于显式地禁用支持原生的 unicode。这是 某些数据库适配器必须的（像在 Ubuntu 某些版本上的 PostgreSQL），当使用不合适的指定无编码的数据库 默认值时。</th></tr></thead><tbody><tr><td><code>SQLALCHEMY_DATABASE_URI</code></td><td>用于连接数据的数据库。例如：<code>sqlite:////tmp/test.db``mysql://username:password@server/db</code></td></tr><tr><td><code>SQLALCHEMY_BINDS</code></td><td>一个映射绑定 (bind) 键到 SQLAlchemy 连接 URIs 的字典。 更多的信息请参阅 <a href="http://www.pythondoc.com/flask-sqlalchemy/binds.html#binds" target="_blank" rel="noopener"><em>绑定多个数据库</em></a>。</td></tr><tr><td><code>SQLALCHEMY_ECHO</code></td><td>如果设置成 True，SQLAlchemy 将会记录所有 发到标准输出(stderr)的语句，这对调试很有帮助。</td></tr><tr><td><code>SQLALCHEMY_RECORD_QUERIES</code></td><td>可以用于显式地禁用或者启用查询记录。查询记录 在调试或者测试模式下自动启用。更多信息请参阅 <code>get_debug_queries()</code>。</td></tr><tr><td><code>SQLALCHEMY_POOL_SIZE</code></td><td>数据库连接池的大小。默认是数据库引擎的默认值 （通常是 5）。</td></tr><tr><td><code>SQLALCHEMY_POOL_TIMEOUT</code></td><td>指定数据库连接池的超时时间。默认是 10。</td></tr><tr><td><code>SQLALCHEMY_POOL_RECYCLE</code></td><td>自动回收连接的秒数。这对 MySQL 是必须的，默认 情况下 MySQL 会自动移除闲置 8 小时或者以上的连接。 需要注意地是如果使用 MySQL 的话， Flask-SQLAlchemy 会自动地设置这个值为 2 小时。</td></tr><tr><td><code>SQLALCHEMY_MAX_OVERFLOW</code></td><td>控制在连接池达到最大值后可以创建的连接数。当这些额外的 连接回收到连接池后将会被断开和抛弃。</td></tr><tr><td><code>SQLALCHEMY_TRACK_MODIFICATIONS</code></td><td>如果设置成 True (默认情况)，Flask-SQLAlchemy 将会追踪对象的修改并且发送信号。这需要额外的内存， 如果不必要的可以禁用它。</td></tr></tbody></table><p><em>New in version 0.8:</em> 增加 <code>SQLALCHEMY_NATIVE_UNICODE</code>, <code>SQLALCHEMY_POOL_SIZE</code>, <code>SQLALCHEMY_POOL_TIMEOUT</code> 和 <code>SQLALCHEMY_POOL_RECYCLE</code> 配置键。</p><p><em>New in version 0.12:</em> 增加 <code>SQLALCHEMY_BINDS</code> 配置键。</p><p><em>New in version 0.17:</em> 增加 <code>SQLALCHEMY_MAX_OVERFLOW</code> 配置键。</p><p><em>New in version 2.0:</em> 增加 <code>SQLALCHEMY_TRACK_MODIFICATIONS</code> 配置键。</p><h3 id="连接-URI-格式"><a href="#连接-URI-格式" class="headerlink" title="连接 URI 格式"></a>连接 URI 格式</h3><p>完整连接 URI 格式列表请跳转到 SQLAlchemy 下面的文档(<a href="http://www.sqlalchemy.org/docs/core/engines.html" target="_blank" rel="noopener">支持的数据库</a>)。这里展示了一些常见的连接字符串。</p><p>SQLAlchemy 把一个引擎的源表示为一个连同设定引擎选项的可选字符串参数的 URI。URI 的形式是:</p><pre><code>dialect+driver://username:password@host:port/database</code></pre><p>该字符串中的许多部分是可选的。如果没有指定驱动器，会选择默认的（确保在这种情况下 <em>不</em> 包含 <code>+</code> ）。</p><p>Postgres:</p><pre><code>postgresql://scott:tiger@localhost/mydatabase</code></pre><p>MySQL:</p><pre><code>mysql://scott:tiger@localhost/mydatabase</code></pre><p>Oracle:</p><pre><code>oracle://scott:tiger@127.0.0.1:1521/sidname</code></pre><p>SQLite (注意开头的四个斜线):</p><pre><code>sqlite:////absolute/path/to/foo.db</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask进阶篇(二) 蓝本(Blueprint)与Script</title>
      <link href="2020/12/08/flask-jin-jie-pian-er/"/>
      <url>2020/12/08/flask-jin-jie-pian-er/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Flask进阶篇-二-：蓝本-Blueprint-与Script"><a href="#Flask进阶篇-二-：蓝本-Blueprint-与Script" class="headerlink" title="Flask进阶篇(二)：蓝本(Blueprint)与Script"></a>Flask进阶篇(二)：蓝本(Blueprint)与Script</h1></blockquote><h2 id="蓝本-Blueprint"><a href="#蓝本-Blueprint" class="headerlink" title="蓝本(Blueprint)"></a>蓝本(Blueprint)</h2><h3 id="一、基本概念："><a href="#一、基本概念：" class="headerlink" title="一、基本概念："></a>一、基本概念：</h3><p>将视图方法模块化，既当大量的视图函数放在一个文件中，很明显是不合适，最好的方案是根据功能将路由合理的划分到不同的文件中；而蓝本就是为了解决这个问题而出现的。</p><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint</code></pre><h4 id="创建视图函数及对象"><a href="#创建视图函数及对象" class="headerlink" title="创建视图函数及对象"></a>创建视图函数及对象</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对象</span>user <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 视图函数</span>@user<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hello!!"</span></code></pre><h4 id="注册蓝本"><a href="#注册蓝本" class="headerlink" title="注册蓝本"></a>注册蓝本</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入刚刚加的字段user</span><span class="token keyword">from</span> blueprint <span class="token keyword">import</span> user<span class="token comment" spellcheck="true"># 蓝本注册 url_prefix是前缀必须加"/"</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>user<span class="token punctuation">,</span>url_prefix<span class="token operator">=</span><span class="token string">"/user"</span><span class="token punctuation">)</span></code></pre><h2 id="Flask-Script"><a href="#Flask-Script" class="headerlink" title="Flask Script"></a>Flask Script</h2><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><blockquote><p>（1）<code>Flask Script</code>扩展提供向Flask插入外部脚本的功能，包括运行一个开发用的服务器，一个定制的<code>Python shell</code>，设置数据库的脚本，<code>cronjobs</code>，及其他运行在<code>web</code>应用之外的命令行任务；使得脚本和系统分开；</p><p>（2）<code>Flask Script</code>和<code>Flask</code>本身的工作方式类似，只需定义和添加从命令行中被<code>Manager</code>实例调用的命令；</p><p>（3）<code>flask_script</code>的作用是可以通过命令行的形式来操作<code>flask</code>例如通过一个命令跑一个开发版本的服务器，设置数据库，定时任务等</p><p>（4）通过使用<code>Flask-Script</code>扩展，我们可以在<code>Flask</code>服务器启动的时候，通过命令行的方式传入参数。而不仅仅通过app.run()方法中传参，比如我们可以通过<code>python hello.py runserver --host ip</code>地址，告诉服务器在哪个网络接口监听来自客户端的连接。默认情况下，服务器只监听来自服务器所在计算机发起的连接，即localhost连接。</p></blockquote><h3 id="二、使用-1"><a href="#二、使用-1" class="headerlink" title="二、使用"></a>二、使用</h3><blockquote><p>第一次运行的得下载这个模块；<code>Flask-Script</code></p></blockquote><h4 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span>Server</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>实例化Flask对象</li></ol><pre class=" language-python"><code class="language-python">rom flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Serverapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></code></pre><ol start="2"><li>将Flask实例对象传入Manager</li></ol><pre class=" language-py"><code class="language-py">manager = Manager(app)</code></pre><ol start="3"><li>添加Manager实例调用的命令</li></ol><pre class=" language-python"><code class="language-python">manage<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">"runserver"</span><span class="token punctuation">,</span>Server<span class="token punctuation">(</span>use_debugger<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>运行manage实例</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manage<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="https://zackyoung.top/resource/Flask-demo2-02.7z">源码下载</a></h2><blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2></blockquote><h3 id="运行报错"><a href="#运行报错" class="headerlink" title="运行报错"></a>运行报错</h3><p><img src="https://s3.ax1x.com/2020/12/08/r9P4oD.png"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="https://s3.ax1x.com/2020/12/08/r9PHSA.png"></p><p><img src="https://s3.ax1x.com/2020/12/08/r9PhdO.png"></p>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask进阶篇(一)：返回`JSON`数据</title>
      <link href="2020/12/08/flask-jin-jie-pian-yi/"/>
      <url>2020/12/08/flask-jin-jie-pian-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Flask进阶篇-一-：返回JSON数据"><a href="#Flask进阶篇-一-：返回JSON数据" class="headerlink" title="Flask进阶篇(一)：返回JSON数据"></a>Flask进阶篇(一)：返回<code>JSON</code>数据</h1></blockquote><h2 id="第一种-直接返回dict"><a href="#第一种-直接返回dict" class="headerlink" title="第一种(直接返回dict)"></a>第一种(直接返回<code>dict</code>)</h2><p>这是最基本的不用转换</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 最基本的</span>    dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"36"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> dict</code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rpK5VA.png"></p><h2 id="第二种-list里的dict"><a href="#第二种-list里的dict" class="headerlink" title="第二种(list里的dict)"></a>第二种(<code>list</code>里的<code>dict</code>)</h2><blockquote><p>首先需要导转换包jsonify</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonify</code></pre><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 基本的json列表，不过还是需要转,因为默认只能返回string,tuple,dict</span>    dict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"32"</span><span class="token punctuation">}</span>    dict2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token string">"36"</span><span class="token punctuation">}</span>    list <span class="token operator">=</span> <span class="token punctuation">[</span>dict1<span class="token punctuation">,</span>dict2<span class="token punctuation">]</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>list<span class="token punctuation">)</span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rpKhbd.png"></p><h2 id="第三种-list里的str-int"><a href="#第三种-list里的str-int" class="headerlink" title="第三种(list里的str,int)"></a>第三种(<code>list</code>里的<code>str</code>,<code>int</code>)</h2><blockquote><p><font color="red" size=4>注意：我这里举了<code>str</code>,<code>int</code>这两个类型，这两个列表里的长度一定保证一样</font></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这列表的长度一定得保证一样</span>    lists_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">]</span>    lists_age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span>    list_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 循环(0,列表长度)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>lists_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 这里自定义字段,我举了name和age</span>        dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> lists_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        dict<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> lists_age<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        list_l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>list_l<span class="token punctuation">)</span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rpKfDH.png"></p><blockquote><p>以上就是一些基本情况，如果有<code>不懂</code>或<code>补充</code>的地方，请<code>留言评论</code>！！！</p></blockquote><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="https://zackyoung.top/resource/Flask-demo2-01.7z">源码下载</a></h2>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask基础篇（响应不同的请求，参数获取，模板渲染）</title>
      <link href="2020/12/08/flask-ji-chu-pian/"/>
      <url>2020/12/08/flask-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Flask基础篇；主要内容响应不同的请求，参数获取，模板渲染"><a href="#Flask基础篇；主要内容响应不同的请求，参数获取，模板渲染" class="headerlink" title="Flask基础篇；主要内容响应不同的请求，参数获取，模板渲染"></a><code>Flask</code>基础篇；主要内容<strong>响应不同的请求</strong>，<strong>参数获取</strong>，<strong>模板渲染</strong></h3></blockquote><h2 id="请求识别"><a href="#请求识别" class="headerlink" title="请求识别"></a>请求识别</h2><h3 id="第一种方法（注解式）"><a href="#第一种方法（注解式）" class="headerlink" title="第一种方法（注解式）"></a>第一种方法（注解式）</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一种方法</span><span class="token comment" spellcheck="true"># 只有Get方法才能访问</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/h"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"你用的是Get哟"</span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSI0TU.png"></p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 只有Get方法才能访问</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/h"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"你用的是Post哟"</span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSI9L6.png"></p><h3 id="第二种方法（判断式）"><a href="#第二种方法（判断式）" class="headerlink" title="第二种方法（判断式）"></a>第二种方法（判断式）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第二种方法</span><span class="token comment" spellcheck="true"># 首先导入request包</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> request@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/n"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getAndPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    method <span class="token operator">=</span> request<span class="token punctuation">.</span>method    <span class="token comment" spellcheck="true"># 判断访问是get还是post</span>    <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"你用的是%s哟"</span> <span class="token operator">%</span> method    <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"你用的是%s哟"</span> <span class="token operator">%</span> method</code></pre><h2 id="参数添加"><a href="#参数添加" class="headerlink" title="参数添加"></a>参数添加</h2><h3 id="第一种（变量规则）"><a href="#第一种（变量规则）" class="headerlink" title="第一种（变量规则）"></a>第一种（变量规则）</h3><p>要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <code>&lt;variable_name&gt;</code> ， 这个部分将会作为命名参数传递到你的函数。规则可以用 <code>&lt;converter:variable_name&gt;</code> 指定一个可选的转换器。</p><p>转换器有下面几种：</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td>接受整数</td></tr><tr><td>float</td><td>同 int ，但是接受浮点数</td></tr><tr><td>path</td><td>和默认的相似，但也接受斜线</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加参数</span><span class="token comment" spellcheck="true"># 第一种方法 注意(访问一定要加"/add/参数"形式;例如/add/张三,不然会404)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/add/&lt;username>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">addUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"参数传过来了，你是%s"</span> <span class="token operator">%</span> username</code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSIpsx.png"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果要指定传过来的参数是整形的话,如下;</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/add/&lt;int:age>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">addAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"参数传过来了，你现在%d岁"</span> <span class="token operator">%</span> age</code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSISQ1.png"></p><h3 id="第二种-参数形式"><a href="#第二种-参数形式" class="headerlink" title="第二种(参数形式)"></a>第二种(参数形式)</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第二种</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"参数传过来了，你是%s，目前%s岁！"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rS5vW9.png"></p><h2 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h2><blockquote><p>在讲模板之前。先设置一下模板</p></blockquote><h3 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a>设置模板</h3><p>首先选择<code>jinja2</code>模板引擎语言</p><p><img src="https://s3.ax1x.com/2020/12/08/rSvyyF.png"></p><p>然后标记templates为模板</p><p><img src="https://s3.ax1x.com/2020/12/08/rSvUds.png"></p><h3 id="开始使用模板引擎"><a href="#开始使用模板引擎" class="headerlink" title="开始使用模板引擎"></a>开始使用模板引擎</h3><blockquote><p>首先导入包</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template</code></pre><blockquote><p><strong><font color="red">注意：</font>这里注意一下；我们在初始化<code>Flask</code>的时候，是可以自定义模板的主路径。比如：</strong></p><pre class=" language-python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 简单</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span></code></pre><p><code>h5</code> 语言</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>你好，我是H5界面！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSzLGt.png"></p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#基础</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/test/&lt;username>"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/test.html"</span><span class="token punctuation">,</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>你好，{{ username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSvYLQ.png"></p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><h5 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 进阶(一)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">h_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/list.html"</span><span class="token punctuation">,</span>list<span class="token operator">=</span>list<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>循环打印出他们的名字{% for name in list %}{{ name }},{% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSvNZj.png"></p><h5 id="二"><a href="#二" class="headerlink" title="(二)"></a>(二)</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 进阶二</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/list2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">h_list2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"/list2.html"</span><span class="token punctuation">,</span>list<span class="token operator">=</span>list<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> list <span class="token operator">%</span><span class="token punctuation">}</span><span class="token string">"{{ name }}"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">+</span><span class="token operator">=</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        name<span class="token operator">+</span><span class="token operator">=</span><span class="token string">","</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"遍历了列表,他们的名字分别是："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://s3.ax1x.com/2020/12/08/rSvJsg.png"></p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><a href="https://zackyoung.top/resource/Flask-demo1.7z">源码下载</a></h2>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask入门篇（创建第一个Flask程序）</title>
      <link href="2020/12/08/flask-ru-men-pian/"/>
      <url>2020/12/08/flask-ru-men-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="\#7ec699">Flask3需要一定的Python基础，我这里使用<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">Pycharm(专业版Professional)</a>工具</font></p><p><font color="red" size=5>注：如果对于Web概念不太清楚的，<a href="http://zackyoung.top/2020/12/07/web-jiang-jie/">看看这个</a></font></p></blockquote><h2 id="什么是Flask"><a href="#什么是Flask" class="headerlink" title="什么是Flask"></a>什么是<code>Flask</code></h2><h3 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h3><blockquote><p><code>Flask</code>是<code>Python</code>中的一个<code>Web</code>框架，同样的还有<code>Django</code>等等；<code>Flask</code>默认的模板引擎是<code>jinja2</code>，这个后面会讲解到，大家也可以自行百度它的用法；</p></blockquote><h3 id="难度"><a href="#难度" class="headerlink" title="难度"></a>难度</h3><blockquote><p>我觉得<code>Flask</code>框架应用非常简单，上手非常快，从入门到进阶只需要1个小时，然后后面一星期每天练习一次，就差不多完全掌握了基本用法。我后面会说如何连接<code>MySQL</code>、<code>Redis</code>，它的接口用法，然后返回<code>Json</code>数据，与<code>jinja2</code>模板引擎同用；</p></blockquote><h2 id="Pycharm入门篇"><a href="#Pycharm入门篇" class="headerlink" title="Pycharm入门篇"></a>Pycharm入门篇</h2><p>首先从如何创建一个<code>Flask</code>应用开始</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKpzF.png" alt="创建"></p><p>然后选择环境</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKCM4.png"></p><p>创建完成，界面如下</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKkZR.png"></p><p>创建一个<code>python</code>程序</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKPsJ.png"></p><p>输入文件名</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKiL9.png"></p><p>创建完了，如下</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKeJK.png"></p><h2 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装<code>Flask</code></h2><h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><p>打开设置</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKmRO.png"></p><p><img src="https://s3.ax1x.com/2020/12/08/rSKAd1.png"></p><p>配置<code>url</code></p><p><img src="https://s3.ax1x.com/2020/12/08/rSKZi6.png"></p><p><img src="https://s3.ax1x.com/2020/12/08/rSKEIx.png"></p><pre class=" language-markdown"><code class="language-markdown">豆瓣： https://pypi.douban.com/simple/清华： https://pypi.tuna.tsinghua.edu.cn/simple/阿里： http://mirrors.aliyun.com/pypi/simple/</code></pre><p>安装<code>Flask</code>包</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKnzD.png"></p><h3 id="运行第一个Flask程序"><a href="#运行第一个Flask程序" class="headerlink" title="运行第一个Flask程序"></a>运行第一个<code>Flask</code>程序</h3><p><img src="https://s3.ax1x.com/2020/12/08/rSKMsH.png"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入需要的包</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token comment" spellcheck="true"># 初始化Flask</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注意,这个注解式核心("/"是主路线)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个返回"hello world！！!"</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hello world！！!"</span><span class="token comment" spellcheck="true"># main方法</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 运行方法(port:(int)端口,debug:Boolean)是否开始界面报错通知)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><blockquote><p><font color="red">补充：<code>Flask</code>默认端口是5000</font></p></blockquote><p>运行讲解</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKQLd.png"></p><p>查看运行结果</p><p><img src="https://s3.ax1x.com/2020/12/08/rSKKQe.png"></p><p>有什么<strong>失误</strong>或<strong>不懂</strong>的地方请在下<strong>评论</strong>，或<strong>联系我</strong><a href="mailto:zackyoungh@qq.com">qq邮箱</a> (<a href="mailto:&#122;&#x61;&#x63;&#107;&#121;&#111;&#x75;&#110;&#x67;&#x68;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#122;&#x61;&#x63;&#107;&#121;&#111;&#x75;&#110;&#x67;&#x68;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a>)！</p>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
            <tag> Flask </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈对Web的理解(一)</title>
      <link href="2020/12/07/web-jiang-jie/"/>
      <url>2020/12/07/web-jiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="red" size=5 >阅读须知：本文讲解的是Web的基本方法，知识较深可跳过</font></p></blockquote><h2 id="Web的理解"><a href="#Web的理解" class="headerlink" title="Web的理解"></a>Web的理解</h2><h3 id="分析网站地址"><a href="#分析网站地址" class="headerlink" title="分析网站地址"></a>分析网站地址</h3><p>不管我们入门什么<strong>web框架</strong>,首先就要了解地址(<code>url</code>)；这是第一步,我就简单的描述一下吧，话不多说：直接上图<br><a href="https://s3.ax1x.com/2020/12/07/DxaaEF.png" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/07/DxaaEF.png" alt="网址理解"></a></p><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p>只列出如下几个</p><blockquote><ol><li>GET   (我们<strong>直接使用浏览器访问</strong>的网址就是get请求)</li><li>POST  (这个访问可能要借用到工具,如<a href="https://www.postman.com/" target="_blank" rel="noopener">postman</a>等;一般的post请求都是被称为接口,因为js只有使用Ajax才能访问)</li><li>PUT(与post的区别：新建一条记录的话就用post，更新一条记录的话就用put.下列的请求都不常用)</li><li>DELETE</li><li>HEAD</li></ol><blockquote><p>注意：本后面使用POST都会使用<a href="https://www.postman.com/" target="_blank" rel="noopener">postman</a>工具</p></blockquote></blockquote><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p><code>json</code>在Python中理解就是<code>字典(dict)</code>，一对一,包含多个也可以是<strong>列表(数组)</strong><br>下列为常见的接口<code>json</code>数据，如：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">32</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">36</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p> <font color="red">注意！！<code>JSON</code>采用的是Key-Value形式,每一段仅有一个Key(<strong>不能出现相同的</strong>)，就像<code>Java</code>中的<code>Map</code>。在Spring中，标准的返回形式就是<code>Map</code>，但是我们常用的是建一个返回实体类（<code>面向对象编程</code>）</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flask(web可视化框架总结) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次测试</title>
      <link href="2020/12/06/di-yi-ci-ce-shi/"/>
      <url>2020/12/06/di-yi-ci-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="测试代码显示"><a href="#测试代码显示" class="headerlink" title="测试代码显示"></a>测试代码显示</h2><h3 id="二分算法-非递归-JAVA语言"><a href="#二分算法-非递归-JAVA语言" class="headerlink" title="二分算法(非递归)JAVA语言"></a>二分算法(非递归)JAVA语言</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @desc 二分查询（非递归方式） * 案例： * {1,3,8,10,11,67,100}，编程实现二分查找，要求使用非递归方式完成。 * @Author xw * @Date 2019/9/27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearchNonRecursive</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了，下标为："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向左找</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向右找</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="冒泡排序-Python3"><a href="#冒泡排序-Python3" class="headerlink" title="冒泡排序(Python3)"></a>冒泡排序(Python3)</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历所有数组元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Last i elements are already in place</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>bubbleSort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"排序后的数组:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token operator">%</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><a href="https://s3.ax1x.com/2020/12/08/rpP7C9.jpg" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/08/rpP7C9.jpg" alt="测试图片"></a></p>]]></content>
      
      
      <categories>
          
          <category> 运营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> JAVA </tag>
            
            <tag> Hadoop </tag>
            
            <tag> Node.js </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
